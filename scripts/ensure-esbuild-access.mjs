#!/usr/bin/env node
/**
 * Ensures the Windows-friendly stub for `node_modules/.bin/esbuild`
 * exists as a regular file. In environments like OneDrive the symlink
 * that npm places there can end up unreadable (EACCES), which breaks
 * Next.js build globbing. We recreate the stub only when access fails.
 */
import {
  accessSync,
  constants,
  unlinkSync,
  rmSync,
  renameSync,
  writeFileSync,
  chmodSync,
  existsSync,
} from 'node:fs'
import { join } from 'node:path'
import { spawnSync } from 'node:child_process'

const target = join(process.cwd(), 'node_modules', '.bin', 'esbuild')

try {
  accessSync(target, constants.X_OK)
  process.exit(0)
} catch (err) {
  if (err && err.code !== 'EACCES' && err.code !== 'ENOENT') {
    process.exit(0)
  }
}

try {
  unlinkSync(target)
} catch {
  try {
    rmSync(target, { force: true })
  } catch {
    try {
      renameSync(target, `${target}.link`)
    } catch {
      if (process.platform === 'win32') {
        spawnSync('cmd', ['/c', 'del', '/f', target], { stdio: 'ignore' })
      }
    }
  }
}

const stub = `#!/usr/bin/env node
// Auto-generated by scripts/ensure-esbuild-access.mjs
const { join } = require('path')
const { existsSync } = require('fs')
const bin = join(__dirname, '..', 'esbuild', 'bin', 'esbuild')
if (!existsSync(bin)) {
  throw new Error(\`esbuild binary not found at \${bin}\`)
}
require(bin)
`

const backup = `${target}.link`
if (existsSync(backup)) {
  try {
    rmSync(backup, { force: true })
  } catch {
    // ignore
  }
}

try {
  writeFileSync(target, stub, { encoding: 'utf8', mode: 0o755, flag: 'w' })
  try {
    chmodSync(target, 0o755)
  } catch {
    // chmod is a no-op on Windows, ignore errors
  }
} catch (error) {
  console.warn('[ensure-esbuild-access] Could not rewrite', target, '-', error.message)
}
